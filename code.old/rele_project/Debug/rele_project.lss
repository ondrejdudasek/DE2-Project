
rele_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000086a  000008fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000086a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010c  00800140  00800140  0000093e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000178f  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bec  00000000  00000000  0000228f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac6  00000000  00000000  00002e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00003944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000635  00000000  00000000  00003c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b51  00000000  00000000  0000424d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004d9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_18>
  4c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 34       	cpi	r26, 0x4C	; 76
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 01 	call	0x302	; 0x302 <main>
  9e:	0c 94 33 04 	jmp	0x866	; 0x866 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	81 81       	ldd	r24, Z+1	; 0x01
  d8:	28 23       	and	r18, r24
  da:	21 83       	std	Z+1, r18	; 0x01
  dc:	08 95       	ret

000000de <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  de:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  e0:	90 81       	ld	r25, Z
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <GPIO_write_low+0xe>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <GPIO_write_low+0xa>
  f0:	20 95       	com	r18
  f2:	29 23       	and	r18, r25
  f4:	20 83       	st	Z, r18
  f6:	08 95       	ret

000000f8 <GPIO_write_high>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  f8:	fc 01       	movw	r30, r24
  fa:	40 81       	ld	r20, Z
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <GPIO_write_high+0xe>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <GPIO_write_high+0xa>
 10a:	24 2b       	or	r18, r20
 10c:	20 83       	st	Z, r18
 10e:	08 95       	ret

00000110 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 110:	85 b1       	in	r24, 0x05	; 5
 112:	82 60       	ori	r24, 0x02	; 2
 114:	85 b9       	out	0x05, r24	; 5
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <toggle_e+0x8>
 11c:	00 00       	nop
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	85 b9       	out	0x05, r24	; 5
 124:	08 95       	ret

00000126 <lcd_write>:
 126:	cf 93       	push	r28
 128:	c8 2f       	mov	r28, r24
 12a:	66 23       	and	r22, r22
 12c:	21 f0       	breq	.+8      	; 0x136 <lcd_write+0x10>
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	81 60       	ori	r24, 0x01	; 1
 132:	85 b9       	out	0x05, r24	; 5
 134:	03 c0       	rjmp	.+6      	; 0x13c <lcd_write+0x16>
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	8a b1       	in	r24, 0x0a	; 10
 13e:	80 61       	ori	r24, 0x10	; 16
 140:	8a b9       	out	0x0a, r24	; 10
 142:	8a b1       	in	r24, 0x0a	; 10
 144:	80 62       	ori	r24, 0x20	; 32
 146:	8a b9       	out	0x0a, r24	; 10
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	8a b9       	out	0x0a, r24	; 10
 14e:	8a b1       	in	r24, 0x0a	; 10
 150:	80 68       	ori	r24, 0x80	; 128
 152:	8a b9       	out	0x0a, r24	; 10
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8f 77       	andi	r24, 0x7F	; 127
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	8b b9       	out	0x0b, r24	; 11
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	8f 7e       	andi	r24, 0xEF	; 239
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	cc 23       	and	r28, r28
 16e:	1c f4       	brge	.+6      	; 0x176 <lcd_write+0x50>
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	80 68       	ori	r24, 0x80	; 128
 174:	8b b9       	out	0x0b, r24	; 11
 176:	c6 ff       	sbrs	r28, 6
 178:	03 c0       	rjmp	.+6      	; 0x180 <lcd_write+0x5a>
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	c5 ff       	sbrs	r28, 5
 182:	03 c0       	rjmp	.+6      	; 0x18a <lcd_write+0x64>
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 62       	ori	r24, 0x20	; 32
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	c4 ff       	sbrs	r28, 4
 18c:	03 c0       	rjmp	.+6      	; 0x194 <lcd_write+0x6e>
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	80 61       	ori	r24, 0x10	; 16
 192:	8b b9       	out	0x0b, r24	; 11
 194:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8f 7b       	andi	r24, 0xBF	; 191
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	8f 7d       	andi	r24, 0xDF	; 223
 1a8:	8b b9       	out	0x0b, r24	; 11
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	8f 7e       	andi	r24, 0xEF	; 239
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	c3 ff       	sbrs	r28, 3
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <lcd_write+0x94>
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	c2 ff       	sbrs	r28, 2
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <lcd_write+0x9e>
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	c1 ff       	sbrs	r28, 1
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <lcd_write+0xa8>
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	c0 ff       	sbrs	r28, 0
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <lcd_write+0xb2>
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	80 61       	ori	r24, 0x10	; 16
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	8b b9       	out	0x0b, r24	; 11
 1e8:	8b b1       	in	r24, 0x0b	; 11
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	8b b9       	out	0x0b, r24	; 11
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	8b b9       	out	0x0b, r24	; 11
 1f4:	87 eb       	ldi	r24, 0xB7	; 183
 1f6:	9b e0       	ldi	r25, 0x0B	; 11
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_write+0xd2>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcd_write+0xd8>
 1fe:	00 00       	nop
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <lcd_command>:
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write>
 20a:	08 95       	ret

0000020c <lcd_data>:
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write>
 212:	08 95       	ret

00000214 <lcd_gotoxy>:
 214:	61 11       	cpse	r22, r1
 216:	04 c0       	rjmp	.+8      	; 0x220 <lcd_gotoxy+0xc>
 218:	80 58       	subi	r24, 0x80	; 128
 21a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 21e:	08 95       	ret
 220:	80 54       	subi	r24, 0x40	; 64
 222:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 226:	08 95       	ret

00000228 <lcd_clrscr>:
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 22e:	08 95       	ret

00000230 <lcd_putc>:
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write>
 236:	08 95       	ret

00000238 <lcd_puts>:
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	fc 01       	movw	r30, r24
 23e:	03 c0       	rjmp	.+6      	; 0x246 <lcd_puts+0xe>
 240:	0e 94 18 01 	call	0x230	; 0x230 <lcd_putc>
 244:	fe 01       	movw	r30, r28
 246:	ef 01       	movw	r28, r30
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	80 81       	ld	r24, Z
 24c:	81 11       	cpse	r24, r1
 24e:	f8 cf       	rjmp	.-16     	; 0x240 <lcd_puts+0x8>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 25a:	84 b1       	in	r24, 0x04	; 4
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 260:	8a b1       	in	r24, 0x0a	; 10
 262:	80 62       	ori	r24, 0x20	; 32
 264:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 266:	84 b1       	in	r24, 0x04	; 4
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	80 61       	ori	r24, 0x10	; 16
 270:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 272:	8a b1       	in	r24, 0x0a	; 10
 274:	80 62       	ori	r24, 0x20	; 32
 276:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 278:	8a b1       	in	r24, 0x0a	; 10
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 27e:	8a b1       	in	r24, 0x0a	; 10
 280:	80 68       	ori	r24, 0x80	; 128
 282:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	99 ef       	ldi	r25, 0xF9	; 249
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_init+0x32>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <lcd_init+0x38>
 28e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	80 62       	ori	r24, 0x20	; 32
 294:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 296:	8b b1       	in	r24, 0x0b	; 11
 298:	80 61       	ori	r24, 0x10	; 16
 29a:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 29c:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2a0:	8f e1       	ldi	r24, 0x1F	; 31
 2a2:	9e e4       	ldi	r25, 0x4E	; 78
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_init+0x4e>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <lcd_init+0x54>
 2aa:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 2ac:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x5e>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_init+0x64>
 2ba:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 2bc:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_init+0x6e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_init+0x74>
 2ca:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2cc:	8b b1       	in	r24, 0x0b	; 11
 2ce:	8f 7e       	andi	r24, 0xEF	; 239
 2d0:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2d2:	0e 94 88 00 	call	0x110	; 0x110 <toggle_e>
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_init+0x84>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_init+0x8a>
 2e0:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2e2:	88 e2       	ldi	r24, 0x28	; 40
 2e4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2e8:	88 e0       	ldi	r24, 0x08	; 8
 2ea:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2ee:	0e 94 14 01 	call	0x228	; 0x228 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2f2:	86 e0       	ldi	r24, 0x06	; 6
 2f4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2f8:	8c 2f       	mov	r24, r28
 2fa:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <main>:
 *           Timer/Counter2 overflows.
 * Returns:  none
 **********************************************************************/
int main(void) {
	
	GPIO_config_output(&DDRD, trig);
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	8a e2       	ldi	r24, 0x2A	; 42
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD, trig);
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	8b e2       	ldi	r24, 0x2B	; 43
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
	GPIO_config_input_nopull(&DDRD, echo);
 316:	63 e0       	ldi	r22, 0x03	; 3
 318:	8a e2       	ldi	r24, 0x2A	; 42
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	GPIO_config_output(&DDRB, PB5);
 320:	65 e0       	ldi	r22, 0x05	; 5
 322:	84 e2       	ldi	r24, 0x24	; 36
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 32a:	8c e0       	ldi	r24, 0x0C	; 12
 32c:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_init>
    lcd_gotoxy(0, 1);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_gotoxy>
    lcd_puts("LVL:");
 338:	88 e3       	ldi	r24, 0x38	; 56
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_puts>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 340:	80 e4       	ldi	r24, 0x40	; 64
 342:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
	for (uint8_t i = 0; i < 40; i++) {
 346:	c0 e0       	ldi	r28, 0x00	; 0
 348:	08 c0       	rjmp	.+16     	; 0x35a <main+0x58>
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 34a:	ec 2f       	mov	r30, r28
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	e0 50       	subi	r30, 0x00	; 0
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	80 81       	ld	r24, Z
 354:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_data>
    lcd_gotoxy(0, 1);
    lcd_puts("LVL:");

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 40; i++) {
 358:	cf 5f       	subi	r28, 0xFF	; 255
 35a:	c8 32       	cpi	r28, 0x28	; 40
 35c:	b0 f3       	brcs	.-20     	; 0x34a <main+0x48>
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 35e:	80 e8       	ldi	r24, 0x80	; 128
 360:	0e 94 02 01 	call	0x204	; 0x204 <lcd_command>
	
	/*TIM2_overflow_4ms();
	TIM2_overflow_interrupt_enable();*/
	
	//starting uart communication
	uart_init(UART_BAUD_SELECT(9600, 16000000UL));
 364:	87 e6       	ldi	r24, 0x67	; 103
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 90 02 	call	0x520	; 0x520 <uart_init>
	
	// enable external interrupt to any logical change (datasheet page 80)
	EIMSK |= (1<<INT0);
 36c:	8d b3       	in	r24, 0x1d	; 29
 36e:	81 60       	ori	r24, 0x01	; 1
 370:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);
 372:	e9 e6       	ldi	r30, 0x69	; 105
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	81 60       	ori	r24, 0x01	; 1
 37a:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC01);
 37c:	80 81       	ld	r24, Z
 37e:	8d 7f       	andi	r24, 0xFD	; 253
 380:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 382:	78 94       	sei

    // Infinite loop
    while (1) {
        //uart_puts("while is working\r\n");
		GPIO_write_high(&DDRD, trig);
 384:	62 e0       	ldi	r22, 0x02	; 2
 386:	8a e2       	ldi	r24, 0x2A	; 42
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_write_high>
 38e:	25 e3       	ldi	r18, 0x35	; 53
 390:	2a 95       	dec	r18
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x8e>
 394:	00 00       	nop
        _delay_us(10);
        GPIO_write_low(&DDRD, trig);
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	8a e2       	ldi	r24, 0x2A	; 42
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
		length = pulse_length * 0.008325;
 3a0:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <pulse_length>
 3a4:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <pulse_length+0x1>
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 03 03 	call	0x606	; 0x606 <__floatunsisf>
 3b0:	25 e9       	ldi	r18, 0x95	; 149
 3b2:	35 e6       	ldi	r19, 0x65	; 101
 3b4:	48 e0       	ldi	r20, 0x08	; 8
 3b6:	5c e3       	ldi	r21, 0x3C	; 60
 3b8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__mulsf3>
 3bc:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <__data_end>
 3c0:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <__data_end+0x1>
 3c4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end+0x2>
 3c8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x3>
		itoa(length, uart_string, 10);
 3cc:	0e 94 cd 02 	call	0x59a	; 0x59a <__fixsfsi>
 3d0:	dc 01       	movw	r26, r24
 3d2:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3d4:	4a e0       	ldi	r20, 0x0A	; 10
 3d6:	68 e2       	ldi	r22, 0x28	; 40
 3d8:	71 e0       	ldi	r23, 0x01	; 1
 3da:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__itoa_ncheck>
		uart_puts(uart_string);
 3de:	88 e2       	ldi	r24, 0x28	; 40
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 c0 02 	call	0x580	; 0x580 <uart_puts>
		uart_puts("\r\n");
 3e6:	8d e3       	ldi	r24, 0x3D	; 61
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 c0 02 	call	0x580	; 0x580 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	91 ee       	ldi	r25, 0xE1	; 225
 3f2:	24 e0       	ldi	r18, 0x04	; 4
 3f4:	81 50       	subi	r24, 0x01	; 1
 3f6:	90 40       	sbci	r25, 0x00	; 0
 3f8:	20 40       	sbci	r18, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0xf2>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0xfc>
 3fe:	00 00       	nop
 400:	c1 cf       	rjmp	.-126    	; 0x384 <main+0x82>

00000402 <__vector_1>:
    lcd_putc(3);
	lcd_gotoxy(15,0);
	lcd_putc(4);
}*/

ISR(INT0_vect) {
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	ef 93       	push	r30
 412:	ff 93       	push	r31
	//uart_puts("inside INT0/r/n");
	if (counting == 0) {
 414:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <counting>
 418:	81 11       	cpse	r24, r1
 41a:	0c c0       	rjmp	.+24     	; 0x434 <__vector_1+0x32>
		counting = 1;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <counting>
		//uart_puts("start/r/n");
		TIM1_overflow_33ms();
 422:	e1 e8       	ldi	r30, 0x81	; 129
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	8a 7f       	andi	r24, 0xFA	; 250
 42a:	80 83       	st	Z, r24
 42c:	80 81       	ld	r24, Z
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	80 83       	st	Z, r24
 432:	15 c0       	rjmp	.+42     	; 0x45e <__vector_1+0x5c>
	}
	else if (counting == 1) {
 434:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <counting>
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	89 f4       	brne	.+34     	; 0x45e <__vector_1+0x5c>
		TIM1_stop();
 43c:	e1 e8       	ldi	r30, 0x81	; 129
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	88 7f       	andi	r24, 0xF8	; 248
 444:	80 83       	st	Z, r24
		pulse_length = TCNT1;
 446:	e4 e8       	ldi	r30, 0x84	; 132
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	91 81       	ldd	r25, Z+1	; 0x01
 44e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <pulse_length+0x1>
 452:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <pulse_length>
		TCNT1 = 0;
 456:	11 82       	std	Z+1, r1	; 0x01
 458:	10 82       	st	Z, r1
		counting = 0;
 45a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <counting>
	}	
}
 45e:	ff 91       	pop	r31
 460:	ef 91       	pop	r30
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
 484:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 488:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 48c:	8c 71       	andi	r24, 0x1C	; 28
 48e:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <UART_RxHead>
 492:	ef 5f       	subi	r30, 0xFF	; 255
 494:	ef 77       	andi	r30, 0x7F	; 127
 496:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <UART_RxTail>
 49a:	e9 17       	cp	r30, r25
 49c:	39 f0       	breq	.+14     	; 0x4ac <__vector_18+0x3c>
 49e:	e0 93 49 01 	sts	0x0149, r30	; 0x800149 <UART_RxHead>
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	e4 5b       	subi	r30, 0xB4	; 180
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	20 83       	st	Z, r18
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <__vector_18+0x3e>
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <UART_LastRxError>
 4b2:	89 2b       	or	r24, r25
 4b4:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <UART_LastRxError>
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	2f 91       	pop	r18
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <__vector_19>:
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	8f 93       	push	r24
 4d8:	9f 93       	push	r25
 4da:	ef 93       	push	r30
 4dc:	ff 93       	push	r31
 4de:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <UART_TxHead>
 4e2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <UART_TxTail>
 4e6:	98 17       	cp	r25, r24
 4e8:	69 f0       	breq	.+26     	; 0x504 <__vector_19+0x38>
 4ea:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <UART_TxTail>
 4ee:	ef 5f       	subi	r30, 0xFF	; 255
 4f0:	ef 77       	andi	r30, 0x7F	; 127
 4f2:	e0 93 4a 01 	sts	0x014A, r30	; 0x80014a <UART_TxTail>
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	e4 53       	subi	r30, 0x34	; 52
 4fa:	fe 4f       	sbci	r31, 0xFE	; 254
 4fc:	80 81       	ld	r24, Z
 4fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 502:	05 c0       	rjmp	.+10     	; 0x50e <__vector_19+0x42>
 504:	e1 ec       	ldi	r30, 0xC1	; 193
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	8f 7d       	andi	r24, 0xDF	; 223
 50c:	80 83       	st	Z, r24
 50e:	ff 91       	pop	r31
 510:	ef 91       	pop	r30
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <uart_init>:
 520:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <UART_TxHead>
 524:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <UART_TxTail>
 528:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <UART_RxHead>
 52c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <UART_RxTail>
 530:	28 2f       	mov	r18, r24
 532:	39 2f       	mov	r19, r25
 534:	33 23       	and	r19, r19
 536:	1c f4       	brge	.+6      	; 0x53e <uart_init+0x1e>
 538:	22 e0       	ldi	r18, 0x02	; 2
 53a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 53e:	90 78       	andi	r25, 0x80	; 128
 540:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 544:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 548:	88 e9       	ldi	r24, 0x98	; 152
 54a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 54e:	86 e0       	ldi	r24, 0x06	; 6
 550:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 554:	08 95       	ret

00000556 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 556:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <UART_TxHead>
 55a:	2f 5f       	subi	r18, 0xFF	; 255
 55c:	2f 77       	andi	r18, 0x7F	; 127

    while (tmphead == UART_TxTail)
 55e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <UART_TxTail>
 562:	29 17       	cp	r18, r25
 564:	e1 f3       	breq	.-8      	; 0x55e <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 566:	e2 2f       	mov	r30, r18
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	e4 53       	subi	r30, 0x34	; 52
 56c:	fe 4f       	sbci	r31, 0xFE	; 254
 56e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 570:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 574:	e1 ec       	ldi	r30, 0xC1	; 193
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	80 62       	ori	r24, 0x20	; 32
 57c:	80 83       	st	Z, r24
 57e:	08 95       	ret

00000580 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	ec 01       	movw	r28, r24
    while (*s)
 586:	03 c0       	rjmp	.+6      	; 0x58e <uart_puts+0xe>
        uart_putc(*s++);
 588:	21 96       	adiw	r28, 0x01	; 1
 58a:	0e 94 ab 02 	call	0x556	; 0x556 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 58e:	88 81       	ld	r24, Y
 590:	81 11       	cpse	r24, r1
 592:	fa cf       	rjmp	.-12     	; 0x588 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <__fixsfsi>:
 59a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__fixunssfsi>
 59e:	68 94       	set
 5a0:	b1 11       	cpse	r27, r1
 5a2:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__fp_szero>
 5a6:	08 95       	ret

000005a8 <__fixunssfsi>:
 5a8:	0e 94 48 03 	call	0x690	; 0x690 <__fp_splitA>
 5ac:	88 f0       	brcs	.+34     	; 0x5d0 <__fixunssfsi+0x28>
 5ae:	9f 57       	subi	r25, 0x7F	; 127
 5b0:	98 f0       	brcs	.+38     	; 0x5d8 <__fixunssfsi+0x30>
 5b2:	b9 2f       	mov	r27, r25
 5b4:	99 27       	eor	r25, r25
 5b6:	b7 51       	subi	r27, 0x17	; 23
 5b8:	b0 f0       	brcs	.+44     	; 0x5e6 <__fixunssfsi+0x3e>
 5ba:	e1 f0       	breq	.+56     	; 0x5f4 <__fixunssfsi+0x4c>
 5bc:	66 0f       	add	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	88 1f       	adc	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	1a f0       	brmi	.+6      	; 0x5cc <__fixunssfsi+0x24>
 5c6:	ba 95       	dec	r27
 5c8:	c9 f7       	brne	.-14     	; 0x5bc <__fixunssfsi+0x14>
 5ca:	14 c0       	rjmp	.+40     	; 0x5f4 <__fixunssfsi+0x4c>
 5cc:	b1 30       	cpi	r27, 0x01	; 1
 5ce:	91 f0       	breq	.+36     	; 0x5f4 <__fixunssfsi+0x4c>
 5d0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_zero>
 5d4:	b1 e0       	ldi	r27, 0x01	; 1
 5d6:	08 95       	ret
 5d8:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__fp_zero>
 5dc:	67 2f       	mov	r22, r23
 5de:	78 2f       	mov	r23, r24
 5e0:	88 27       	eor	r24, r24
 5e2:	b8 5f       	subi	r27, 0xF8	; 248
 5e4:	39 f0       	breq	.+14     	; 0x5f4 <__fixunssfsi+0x4c>
 5e6:	b9 3f       	cpi	r27, 0xF9	; 249
 5e8:	cc f3       	brlt	.-14     	; 0x5dc <__fixunssfsi+0x34>
 5ea:	86 95       	lsr	r24
 5ec:	77 95       	ror	r23
 5ee:	67 95       	ror	r22
 5f0:	b3 95       	inc	r27
 5f2:	d9 f7       	brne	.-10     	; 0x5ea <__fixunssfsi+0x42>
 5f4:	3e f4       	brtc	.+14     	; 0x604 <__fixunssfsi+0x5c>
 5f6:	90 95       	com	r25
 5f8:	80 95       	com	r24
 5fa:	70 95       	com	r23
 5fc:	61 95       	neg	r22
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	08 95       	ret

00000606 <__floatunsisf>:
 606:	e8 94       	clt
 608:	09 c0       	rjmp	.+18     	; 0x61c <__floatsisf+0x12>

0000060a <__floatsisf>:
 60a:	97 fb       	bst	r25, 7
 60c:	3e f4       	brtc	.+14     	; 0x61c <__floatsisf+0x12>
 60e:	90 95       	com	r25
 610:	80 95       	com	r24
 612:	70 95       	com	r23
 614:	61 95       	neg	r22
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	8f 4f       	sbci	r24, 0xFF	; 255
 61a:	9f 4f       	sbci	r25, 0xFF	; 255
 61c:	99 23       	and	r25, r25
 61e:	a9 f0       	breq	.+42     	; 0x64a <__floatsisf+0x40>
 620:	f9 2f       	mov	r31, r25
 622:	96 e9       	ldi	r25, 0x96	; 150
 624:	bb 27       	eor	r27, r27
 626:	93 95       	inc	r25
 628:	f6 95       	lsr	r31
 62a:	87 95       	ror	r24
 62c:	77 95       	ror	r23
 62e:	67 95       	ror	r22
 630:	b7 95       	ror	r27
 632:	f1 11       	cpse	r31, r1
 634:	f8 cf       	rjmp	.-16     	; 0x626 <__floatsisf+0x1c>
 636:	fa f4       	brpl	.+62     	; 0x676 <__floatsisf+0x6c>
 638:	bb 0f       	add	r27, r27
 63a:	11 f4       	brne	.+4      	; 0x640 <__floatsisf+0x36>
 63c:	60 ff       	sbrs	r22, 0
 63e:	1b c0       	rjmp	.+54     	; 0x676 <__floatsisf+0x6c>
 640:	6f 5f       	subi	r22, 0xFF	; 255
 642:	7f 4f       	sbci	r23, 0xFF	; 255
 644:	8f 4f       	sbci	r24, 0xFF	; 255
 646:	9f 4f       	sbci	r25, 0xFF	; 255
 648:	16 c0       	rjmp	.+44     	; 0x676 <__floatsisf+0x6c>
 64a:	88 23       	and	r24, r24
 64c:	11 f0       	breq	.+4      	; 0x652 <__floatsisf+0x48>
 64e:	96 e9       	ldi	r25, 0x96	; 150
 650:	11 c0       	rjmp	.+34     	; 0x674 <__floatsisf+0x6a>
 652:	77 23       	and	r23, r23
 654:	21 f0       	breq	.+8      	; 0x65e <__floatsisf+0x54>
 656:	9e e8       	ldi	r25, 0x8E	; 142
 658:	87 2f       	mov	r24, r23
 65a:	76 2f       	mov	r23, r22
 65c:	05 c0       	rjmp	.+10     	; 0x668 <__floatsisf+0x5e>
 65e:	66 23       	and	r22, r22
 660:	71 f0       	breq	.+28     	; 0x67e <__floatsisf+0x74>
 662:	96 e8       	ldi	r25, 0x86	; 134
 664:	86 2f       	mov	r24, r22
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	2a f0       	brmi	.+10     	; 0x676 <__floatsisf+0x6c>
 66c:	9a 95       	dec	r25
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	da f7       	brpl	.-10     	; 0x66c <__floatsisf+0x62>
 676:	88 0f       	add	r24, r24
 678:	96 95       	lsr	r25
 67a:	87 95       	ror	r24
 67c:	97 f9       	bld	r25, 7
 67e:	08 95       	ret

00000680 <__fp_split3>:
 680:	57 fd       	sbrc	r21, 7
 682:	90 58       	subi	r25, 0x80	; 128
 684:	44 0f       	add	r20, r20
 686:	55 1f       	adc	r21, r21
 688:	59 f0       	breq	.+22     	; 0x6a0 <__fp_splitA+0x10>
 68a:	5f 3f       	cpi	r21, 0xFF	; 255
 68c:	71 f0       	breq	.+28     	; 0x6aa <__fp_splitA+0x1a>
 68e:	47 95       	ror	r20

00000690 <__fp_splitA>:
 690:	88 0f       	add	r24, r24
 692:	97 fb       	bst	r25, 7
 694:	99 1f       	adc	r25, r25
 696:	61 f0       	breq	.+24     	; 0x6b0 <__fp_splitA+0x20>
 698:	9f 3f       	cpi	r25, 0xFF	; 255
 69a:	79 f0       	breq	.+30     	; 0x6ba <__fp_splitA+0x2a>
 69c:	87 95       	ror	r24
 69e:	08 95       	ret
 6a0:	12 16       	cp	r1, r18
 6a2:	13 06       	cpc	r1, r19
 6a4:	14 06       	cpc	r1, r20
 6a6:	55 1f       	adc	r21, r21
 6a8:	f2 cf       	rjmp	.-28     	; 0x68e <__fp_split3+0xe>
 6aa:	46 95       	lsr	r20
 6ac:	f1 df       	rcall	.-30     	; 0x690 <__fp_splitA>
 6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <__fp_splitA+0x30>
 6b0:	16 16       	cp	r1, r22
 6b2:	17 06       	cpc	r1, r23
 6b4:	18 06       	cpc	r1, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	f1 cf       	rjmp	.-30     	; 0x69c <__fp_splitA+0xc>
 6ba:	86 95       	lsr	r24
 6bc:	71 05       	cpc	r23, r1
 6be:	61 05       	cpc	r22, r1
 6c0:	08 94       	sec
 6c2:	08 95       	ret

000006c4 <__fp_zero>:
 6c4:	e8 94       	clt

000006c6 <__fp_szero>:
 6c6:	bb 27       	eor	r27, r27
 6c8:	66 27       	eor	r22, r22
 6ca:	77 27       	eor	r23, r23
 6cc:	cb 01       	movw	r24, r22
 6ce:	97 f9       	bld	r25, 7
 6d0:	08 95       	ret

000006d2 <__mulsf3>:
 6d2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3x>
 6d6:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_round>
 6da:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_pscA>
 6de:	38 f0       	brcs	.+14     	; 0x6ee <__mulsf3+0x1c>
 6e0:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__fp_pscB>
 6e4:	20 f0       	brcs	.+8      	; 0x6ee <__mulsf3+0x1c>
 6e6:	95 23       	and	r25, r21
 6e8:	11 f0       	breq	.+4      	; 0x6ee <__mulsf3+0x1c>
 6ea:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_inf>
 6ee:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__fp_nan>
 6f2:	11 24       	eor	r1, r1
 6f4:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__fp_szero>

000006f8 <__mulsf3x>:
 6f8:	0e 94 40 03 	call	0x680	; 0x680 <__fp_split3>
 6fc:	70 f3       	brcs	.-36     	; 0x6da <__mulsf3+0x8>

000006fe <__mulsf3_pse>:
 6fe:	95 9f       	mul	r25, r21
 700:	c1 f3       	breq	.-16     	; 0x6f2 <__mulsf3+0x20>
 702:	95 0f       	add	r25, r21
 704:	50 e0       	ldi	r21, 0x00	; 0
 706:	55 1f       	adc	r21, r21
 708:	62 9f       	mul	r22, r18
 70a:	f0 01       	movw	r30, r0
 70c:	72 9f       	mul	r23, r18
 70e:	bb 27       	eor	r27, r27
 710:	f0 0d       	add	r31, r0
 712:	b1 1d       	adc	r27, r1
 714:	63 9f       	mul	r22, r19
 716:	aa 27       	eor	r26, r26
 718:	f0 0d       	add	r31, r0
 71a:	b1 1d       	adc	r27, r1
 71c:	aa 1f       	adc	r26, r26
 71e:	64 9f       	mul	r22, r20
 720:	66 27       	eor	r22, r22
 722:	b0 0d       	add	r27, r0
 724:	a1 1d       	adc	r26, r1
 726:	66 1f       	adc	r22, r22
 728:	82 9f       	mul	r24, r18
 72a:	22 27       	eor	r18, r18
 72c:	b0 0d       	add	r27, r0
 72e:	a1 1d       	adc	r26, r1
 730:	62 1f       	adc	r22, r18
 732:	73 9f       	mul	r23, r19
 734:	b0 0d       	add	r27, r0
 736:	a1 1d       	adc	r26, r1
 738:	62 1f       	adc	r22, r18
 73a:	83 9f       	mul	r24, r19
 73c:	a0 0d       	add	r26, r0
 73e:	61 1d       	adc	r22, r1
 740:	22 1f       	adc	r18, r18
 742:	74 9f       	mul	r23, r20
 744:	33 27       	eor	r19, r19
 746:	a0 0d       	add	r26, r0
 748:	61 1d       	adc	r22, r1
 74a:	23 1f       	adc	r18, r19
 74c:	84 9f       	mul	r24, r20
 74e:	60 0d       	add	r22, r0
 750:	21 1d       	adc	r18, r1
 752:	82 2f       	mov	r24, r18
 754:	76 2f       	mov	r23, r22
 756:	6a 2f       	mov	r22, r26
 758:	11 24       	eor	r1, r1
 75a:	9f 57       	subi	r25, 0x7F	; 127
 75c:	50 40       	sbci	r21, 0x00	; 0
 75e:	9a f0       	brmi	.+38     	; 0x786 <__mulsf3_pse+0x88>
 760:	f1 f0       	breq	.+60     	; 0x79e <__mulsf3_pse+0xa0>
 762:	88 23       	and	r24, r24
 764:	4a f0       	brmi	.+18     	; 0x778 <__mulsf3_pse+0x7a>
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	bb 1f       	adc	r27, r27
 76c:	66 1f       	adc	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	91 50       	subi	r25, 0x01	; 1
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	a9 f7       	brne	.-22     	; 0x762 <__mulsf3_pse+0x64>
 778:	9e 3f       	cpi	r25, 0xFE	; 254
 77a:	51 05       	cpc	r21, r1
 77c:	80 f0       	brcs	.+32     	; 0x79e <__mulsf3_pse+0xa0>
 77e:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_inf>
 782:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__fp_szero>
 786:	5f 3f       	cpi	r21, 0xFF	; 255
 788:	e4 f3       	brlt	.-8      	; 0x782 <__mulsf3_pse+0x84>
 78a:	98 3e       	cpi	r25, 0xE8	; 232
 78c:	d4 f3       	brlt	.-12     	; 0x782 <__mulsf3_pse+0x84>
 78e:	86 95       	lsr	r24
 790:	77 95       	ror	r23
 792:	67 95       	ror	r22
 794:	b7 95       	ror	r27
 796:	f7 95       	ror	r31
 798:	e7 95       	ror	r30
 79a:	9f 5f       	subi	r25, 0xFF	; 255
 79c:	c1 f7       	brne	.-16     	; 0x78e <__mulsf3_pse+0x90>
 79e:	fe 2b       	or	r31, r30
 7a0:	88 0f       	add	r24, r24
 7a2:	91 1d       	adc	r25, r1
 7a4:	96 95       	lsr	r25
 7a6:	87 95       	ror	r24
 7a8:	97 f9       	bld	r25, 7
 7aa:	08 95       	ret

000007ac <__fp_inf>:
 7ac:	97 f9       	bld	r25, 7
 7ae:	9f 67       	ori	r25, 0x7F	; 127
 7b0:	80 e8       	ldi	r24, 0x80	; 128
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	08 95       	ret

000007b8 <__fp_nan>:
 7b8:	9f ef       	ldi	r25, 0xFF	; 255
 7ba:	80 ec       	ldi	r24, 0xC0	; 192
 7bc:	08 95       	ret

000007be <__fp_pscA>:
 7be:	00 24       	eor	r0, r0
 7c0:	0a 94       	dec	r0
 7c2:	16 16       	cp	r1, r22
 7c4:	17 06       	cpc	r1, r23
 7c6:	18 06       	cpc	r1, r24
 7c8:	09 06       	cpc	r0, r25
 7ca:	08 95       	ret

000007cc <__fp_pscB>:
 7cc:	00 24       	eor	r0, r0
 7ce:	0a 94       	dec	r0
 7d0:	12 16       	cp	r1, r18
 7d2:	13 06       	cpc	r1, r19
 7d4:	14 06       	cpc	r1, r20
 7d6:	05 06       	cpc	r0, r21
 7d8:	08 95       	ret

000007da <__fp_round>:
 7da:	09 2e       	mov	r0, r25
 7dc:	03 94       	inc	r0
 7de:	00 0c       	add	r0, r0
 7e0:	11 f4       	brne	.+4      	; 0x7e6 <__fp_round+0xc>
 7e2:	88 23       	and	r24, r24
 7e4:	52 f0       	brmi	.+20     	; 0x7fa <__fp_round+0x20>
 7e6:	bb 0f       	add	r27, r27
 7e8:	40 f4       	brcc	.+16     	; 0x7fa <__fp_round+0x20>
 7ea:	bf 2b       	or	r27, r31
 7ec:	11 f4       	brne	.+4      	; 0x7f2 <__fp_round+0x18>
 7ee:	60 ff       	sbrs	r22, 0
 7f0:	04 c0       	rjmp	.+8      	; 0x7fa <__fp_round+0x20>
 7f2:	6f 5f       	subi	r22, 0xFF	; 255
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	8f 4f       	sbci	r24, 0xFF	; 255
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	08 95       	ret

000007fc <__itoa_ncheck>:
 7fc:	bb 27       	eor	r27, r27
 7fe:	4a 30       	cpi	r20, 0x0A	; 10
 800:	31 f4       	brne	.+12     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 802:	99 23       	and	r25, r25
 804:	22 f4       	brpl	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 806:	bd e2       	ldi	r27, 0x2D	; 45
 808:	90 95       	com	r25
 80a:	81 95       	neg	r24
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	0c 94 0a 04 	jmp	0x814	; 0x814 <__utoa_common>

00000812 <__utoa_ncheck>:
 812:	bb 27       	eor	r27, r27

00000814 <__utoa_common>:
 814:	fb 01       	movw	r30, r22
 816:	55 27       	eor	r21, r21
 818:	aa 27       	eor	r26, r26
 81a:	88 0f       	add	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	aa 1f       	adc	r26, r26
 820:	a4 17       	cp	r26, r20
 822:	10 f0       	brcs	.+4      	; 0x828 <__utoa_common+0x14>
 824:	a4 1b       	sub	r26, r20
 826:	83 95       	inc	r24
 828:	50 51       	subi	r21, 0x10	; 16
 82a:	b9 f7       	brne	.-18     	; 0x81a <__utoa_common+0x6>
 82c:	a0 5d       	subi	r26, 0xD0	; 208
 82e:	aa 33       	cpi	r26, 0x3A	; 58
 830:	08 f0       	brcs	.+2      	; 0x834 <__utoa_common+0x20>
 832:	a9 5d       	subi	r26, 0xD9	; 217
 834:	a1 93       	st	Z+, r26
 836:	00 97       	sbiw	r24, 0x00	; 0
 838:	79 f7       	brne	.-34     	; 0x818 <__utoa_common+0x4>
 83a:	b1 11       	cpse	r27, r1
 83c:	b1 93       	st	Z+, r27
 83e:	11 92       	st	Z+, r1
 840:	cb 01       	movw	r24, r22
 842:	0c 94 23 04 	jmp	0x846	; 0x846 <strrev>

00000846 <strrev>:
 846:	dc 01       	movw	r26, r24
 848:	fc 01       	movw	r30, r24
 84a:	67 2f       	mov	r22, r23
 84c:	71 91       	ld	r23, Z+
 84e:	77 23       	and	r23, r23
 850:	e1 f7       	brne	.-8      	; 0x84a <strrev+0x4>
 852:	32 97       	sbiw	r30, 0x02	; 2
 854:	04 c0       	rjmp	.+8      	; 0x85e <strrev+0x18>
 856:	7c 91       	ld	r23, X
 858:	6d 93       	st	X+, r22
 85a:	70 83       	st	Z, r23
 85c:	62 91       	ld	r22, -Z
 85e:	ae 17       	cp	r26, r30
 860:	bf 07       	cpc	r27, r31
 862:	c8 f3       	brcs	.-14     	; 0x856 <strrev+0x10>
 864:	08 95       	ret

00000866 <_exit>:
 866:	f8 94       	cli

00000868 <__stop_program>:
 868:	ff cf       	rjmp	.-2      	; 0x868 <__stop_program>
